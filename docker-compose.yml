version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: ./app/frontend/Dockerfile
    command: npm run dev
    ports:
      - ${APP_FRONT_PORT}:${APP_FRONT_PORT}
    volumes:
      - ./app/frontend/public:/usr/src/app/frontend/public
      - ./app/frontend/src:/usr/src/app/frontend/src
    environment:
      - NEXT_PUBLIC_APP_API_HOST=${NEXT_PUBLIC_APP_API_HOST}
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: ./app/backend/Dockerfile
    command: npm run start:dev
    ports:
      - ${APP_API_PORT}:${APP_API_PORT}
    volumes:
      - ./app/backend/src:/usr/src/app/backend/src
    environment:
      - APP_API_PORT=${APP_API_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:15-alpine
    ports:
      - ${DB_PORT}:${DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - .docker/postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
